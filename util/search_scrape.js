// Also mostly retyped from face-hh/tweetfree because I am smoothbrained
function scrape() {
  let arr = [];
  // Note: you can look up Xpaths in the Inspector search bar. It works.
  const authorXpath = "//*[starts-with(@id, 'id__')]/div[2]/div/div[1]/a/div/span"
  /* The evaluate() method of the Document interface selects elements based on the XPath expression given in parameters. 
  */
  // XPathResult interface represents the results generated by evaluating an XPath expression within the context of a given node.
  // ORDERED_NODE_SNAPSHOT_TYPE - A result node-set containing snapshots of all the nodes matching the expression. The nodes in
  // the result set are in the same order that they appear in the document.
  const authorElements = document.evaluate(authorXpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);

  function xpathDecode(xpath, i) {
    const contentElements = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    return contentElements.snapshotItem(i);
  }

  // XPathResult: snapshotLength property
  // represents the number of nodes in the result snapshot.
  for (let i = 0; i < authorElements.snapshotLength; i++) {
    const authorElement = authorElements.snapshotItem(i);

    let contentElement = xpathDecode("//*[starts-with(@id, 'id__')]/span[2]", i);

    if (contentElement === null) contentElement = xpathDecode("//*[starts-with(@id, 'id__')]/span", i);
    // IDK Twitter website junk well enough (especially when it's so volatile), but I can say span[2]
    // I was not able to find, while looking for a lonely span in that div worked out just fine, so 
    // this extra 'if' makes a lot of sense.

    const author = authorElement.innerText;
    let content = contentElement.innerText;

    let mentioned = false;

    if (content[0] === " ") {
      mentioned = true;
      content = content.substring(1);
    }

    var obj = { author, content, mentioned };
    arr.push(obj);
  }

  return arr;
}

scrape();